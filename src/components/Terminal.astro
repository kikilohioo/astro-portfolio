---
import { Icon } from "astro-icon/components";

const { commands = {}, display = "normal", position = "left" } = Astro.props;

const terminalMaximized = "terminal-normal";
const terminalCollapsed = "terminal-collapsed";
const terminalMinimized = "terminal-minimized";

let initialClass = "";
let initialHeight = "";

switch (display) {
  case "collapsed":
    initialClass = terminalCollapsed;
    initialHeight = "h-26";
    break;
  case "minimized":
    initialClass = terminalMinimized;
    initialHeight = "hidden";
    break;
  case "normal":
  default:
    initialClass = terminalMaximized;
    initialHeight = "h-82";
    break;
}

const currentPath = Astro.url.pathname;
---

<div
  id="terminal"
  class={initialClass}
  transition:name="terminal"
  data-display={display}
  data-position={position}
>
  <button
    id="minimize-terminal-btn"
    class={`${display == "minimized" ? "hidden" : ""} cursor-pointer`}
  >
    <Icon name="minimize_terminal_2" />
  </button>
  <button
    id="normalize-terminal-btn"
    class={`${display == "minimized" ? "" : "hidden"} cursor-pointer text-center flex flex-row gap-2 items-center -mt-1`}
  >
    Show terminal
    <Icon name="maximize_terminal" size={20} />
  </button>
  <div
    id="console-output"
    class={`overflow-y-auto whitespace-pre-wrap text-sm text-green-400 font-mono ${initialHeight}`}
  >
  </div>

  <div id="terminal-input" class="flex items-center mt-2">
    <span class="text-green-500 mr-2" id="console-prompt">/home $</span>
    <input
      id="console-input"
      type="text"
      class="flex-1 bg-transparent outline-none text-green-400 placeholder-green-700 font-mono"
      placeholder="Escribe un comando..."
    />
  </div>
  <button
    id="toggle-terminal"
    class={`absolute bottom-4 right-1 bg-transparent cursor-pointer text-white font-bold py-2 px-4 rounded shadow-lg
         transition-transform duration-200 hover:scale-110 ${display == "minimized" ? "hidden" : ""}`}
    type="button"
  >
    <Icon
      name="minimize_terminal"
      class={`icon-minimize ${display == "collapsed" || display == "minimized" ? "hidden" : ""}`}
      size={25}
    />
    <Icon
      name="maximize_terminal"
      class={`icon-maximize ${display == "normal" || display == "minimized" || display == "" ? "hidden" : ""}`}
      size={25}
    />
  </button>
</div>

<script is:inline>
  const output = document.getElementById("console-output");
  const prompt = document.getElementById("console-prompt");

  // ðŸ”¹ Guardar la ruta actual
  function setCurrentDir(path) {
    localStorage.setItem("currentDir", path);
  }

  // ðŸ”¹ Obtener la ruta actual
  function getCurrentDir() {
    return localStorage.getItem("currentDir") || "/home"; // valor por defecto
  }

  // ðŸ”¹ Agregar una ruta al historial
  function addDirToHistory(path) {
    let history = JSON.parse(localStorage.getItem("dirHistory")) || [];
    history.push(path); // agregamos la nueva ruta
    localStorage.setItem("dirHistory", JSON.stringify(history));
  }

  // ðŸ”¹ Obtener todo el historial de rutas
  function getDirHistory() {
    return JSON.parse(localStorage.getItem("dirHistory")) || ["/home"];
  }

  // ðŸ”¹ Obtener la Ãºltima ruta antes de la actual
  function getLastDir() {
    const history = JSON.parse(localStorage.getItem("dirHistory")) || [];
    return history.length > 1 ? history[history.length - 2] : "/home";
  }

  // ðŸ”¹ Resetear historial (opcional)
  function clearDirHistory() {
    localStorage.removeItem("dirHistory");
  }

  setCurrentDir(getCurrentDir());
  addDirToHistory(getCurrentDir());

  const routes = {
    "/home": ["projects", "experience", "contact", "links"],
    "/projects": [],
    "/experience": [],
    "/..": [],
    "/contact": [],
    "/links": ["github", "linkedin", "portfolio"],
  };

  const links = {
    github: "https://github.com/tu-usuario",
    linkedin: "https://linkedin.com/in/tu-usuario",
    portfolio: "https://tu-portfolio.com",
  };

  let currentDir = "/home";

  function print(text) {
    output.innerHTML += text + "\n";
    output.scrollTop = output.scrollHeight;
  }

  function runCommand(inputCommand) {
    const args = inputCommand.trim().split(/\s+/);
    const cmd = args[0];
    const param = args[1];

    switch (cmd) {
      case "help":
        print("Comandos disponibles: help, ls, cd, open, clear, pwd");
        break;

      case "ls":
        let target = param
          ? param.startsWith("/")
            ? param.toLowerCase()
            : "/" + param.toLowerCase()
          : currentDir;
        if (routes[target]) {
          if (routes[target].length === 0) {
            print("(vacÃ­o)");
          } else {
            print(routes[target].join("\n"));
          }
        } else {
          print("Directorio no encontrado: " + param);
        }
        break;

      case "cd":
        if (!param) {
          print("Uso: cd <ruta>");
        } else {
          const path = param.startsWith("/")
            ? param.toLowerCase()
            : "/" + param.toLowerCase();
          if (routes[path]) {
            currentDir = path;
            print("Movido a " + currentDir);
            if (path !== "/links") {
              // Redirigir a ruta si no es /links
              window.location.href = path === "/home" ? "/" : path;
            }
            if (path === "/..") {
              window.location.href =
                getLastDir() === "/home" ? "/" : getLastDir();
            }
          } else {
            print("Ruta no encontrada: " + path);
          }
        }
        break;

      case "open":
        if (currentDir !== "/links") {
          print("Debes estar en /links para abrir enlaces.");
        } else if (!param) {
          print("Uso: open <nombre_link>");
        } else {
          const link = links[param.toLowerCase()];
          if (link) {
            print("Abriendo " + param + "...");
            window.open(link, "_blank");
          } else {
            print("Link no encontrado: " + param);
          }
        }
        break;

      case "pwd":
        print(currentDir);
        break;

      case "clear":
        output.innerHTML = "";
        break;

      default:
        print("Comando no reconocido: " + cmd);
    }
  }

  const input = document.getElementById("console-input");
  document.addEventListener("keydown", (e) => {
    if (!input) return;
    if (e.target !== input) return; // asegurarnos de que el evento viene del input

    if (e.key === "Enter") {
      const prompt = document.getElementById("console-prompt");
      const output = document.getElementById("console-output");

      const command = input.value.trim();
      if (!command) return;

      output.innerHTML += prompt.textContent + " " + command + "\n";
      runCommand(command);
      input.value = "";
      prompt.textContent = "/home $";
      output.scrollTop = output.scrollHeight;
    }
  });

  const terminal = document.getElementById("terminal");
  document.addEventListener("click", (e) => {
    const btn = e.target.closest("#toggle-terminal");
    if (!btn) return;

    if (!terminal || !output) return;

    const itemId = "terminal-display";
    let savedDisplay = localStorage.getItem(itemId);

    if (!savedDisplay) {
      savedDisplay = "normal";
      localStorage.setItem(itemId, savedDisplay);
    }

    switch (savedDisplay) {
      case "collapsed":
        setNormalStyle(itemId, terminal, output, btn);
        break;
      case "normal":
      default:
        setCollapsedStyle(itemId, terminal, output, btn);
        break;
    }
  });

  let btnMin = document.getElementById("minimize-terminal-btn");
  let btnMax = document.getElementById("normalize-terminal-btn");
  let toggleTerminal = document.getElementById("toggle-terminal");
  let terminalInput = document.getElementById("terminal-input");

  const terminalDisplayId = "terminal-display";
  const terminalPositionId = "terminal-position";
  const display =
    localStorage.getItem(terminalDisplayId) ??
    terminal.dataset.display ??
    "normal";
  let position =
    localStorage.getItem(terminalPositionId) ??
    terminal.dataset.position ??
    "left";

  const initialMinStyle = position == "left" ? "left-2" : "right-2";
  const initialNorStyle = position == "left" ? "left-[8%]" : "right-[8%]";
  const initialColStyle = position == "left" ? "left-2" : "right-2";

  btnMin.addEventListener("click", (e) => {
    const output = document.getElementById("console-output");

    if (!terminal || !output) return;

    btnMin.classList.add("hidden");
    btnMax.classList.remove("hidden");
    setMinimizedStyle(terminalDisplayId, terminal, output, btnMin);
  });

  btnMax.addEventListener("click", (e) => {
    const terminal = document.getElementById("terminal");
    const output = document.getElementById("console-output");

    if (!terminal || !output) return;

    btnMin.classList.remove("hidden");
    btnMax.classList.add("hidden");

    setNormalStyle(terminalDisplayId, terminal, output, btnMax);
  });

  const setMinimizedStyle = (itemId, terminal, output, btn) => {
    localStorage.setItem(itemId, "minimized");
    terminal.classList.remove("terminal-collapsed");
    terminal.classList.remove("terminal-normal");
    terminal.classList.add("terminal-minimized");

    terminalInput.classList.add("hidden");

    // set left right position
    terminal.classList.remove(initialNorStyle);
    terminal.classList.remove(initialColStyle);
    terminal.classList.add(initialMinStyle);

    output.classList.add("hidden");
    output.classList.remove("h-82");
    output.classList.remove("h-26");
    toggleTerminal.classList.add("hidden");
    toggleTerminal.querySelector(".icon-minimize").classList.remove("hidden");
    toggleTerminal.querySelector(".icon-maximize").classList.add("hidden");
    if (
      btn.querySelector(".icon-minimize") ||
      btn.querySelector(".icon-maximize")
    ) {
      btn.querySelector(".icon-minimize").classList.remove("hidden");
      btn.querySelector(".icon-maximize").classList.add("hidden");
    }
  };

  const setNormalStyle = (itemId, terminal, output, btn) => {
    localStorage.setItem(itemId, "normal");
    terminal.classList.remove("terminal-collapsed");
    terminal.classList.remove("terminal-minimized");
    terminal.classList.add("terminal-normal");

    terminalInput.classList.remove("hidden");

    output.classList.add("h-82");
    output.classList.remove("h-26");

    // set left right position
    terminal.classList.remove(initialMinStyle);
    terminal.classList.add(initialNorStyle);
    terminal.classList.remove(initialColStyle);

    output.classList.remove("hidden");
    toggleTerminal.classList.remove("hidden");
    toggleTerminal.querySelector(".icon-minimize").classList.remove("hidden");
    toggleTerminal.querySelector(".icon-maximize").classList.add("hidden");
    if (
      btn.querySelector(".icon-minimize") ||
      btn.querySelector(".icon-maximize")
    ) {
      btn.querySelector(".icon-minimize").classList.remove("hidden");
      btn.querySelector(".icon-maximize").classList.add("hidden");
    }
  };

  const setCollapsedStyle = (itemId, terminal, output, btn) => {
    localStorage.setItem(itemId, "collapsed");
    terminal.classList.remove("terminal-minimized");
    terminal.classList.remove("terminal-normal");
    terminal.classList.add("terminal-collapsed");

    terminalInput.classList.remove("hidden");

    output.classList.remove("h-82");
    output.classList.add("h-26");

    // set left right position
    terminal.classList.remove(initialMinStyle);
    terminal.classList.remove(initialNorStyle);
    terminal.classList.add(initialColStyle);

    output.classList.remove("hidden");
    btn.querySelector(".icon-minimize").classList.add("hidden");
    btn.querySelector(".icon-maximize").classList.remove("hidden");
  };

  const excludedIds = ["name", "email", "message"];

  function isExcluded(el) {
    return el && excludedIds.includes(el.id);
  }
  // 1. Apenas carga la pÃ¡gina
  input.focus();

  // 2. Cuando se hace click en cualquier parte del documento,
  //    volvemos a darle foco al input (excepto si clickean el botÃ³n toggle)
  document.addEventListener("click", (e) => {
    const toggleBtn = e.target.closest("#toggle-terminal");
    const active = document.activeElement;
    if (toggleBtn) return; // excepciÃ³n para tu botÃ³n
    if (!isExcluded(active)) {
      input.focus();
    }
  });

  // 3. Si el input pierde el foco por cualquier motivo, lo forzamos de nuevo
  input.addEventListener("blur", () => {
    setTimeout(() => {
      const active = document.activeElement;
      if (!isExcluded(active)) {
        input.focus();
      }
    }, 0);
  });

  document.addEventListener("DOMContentLoaded", () => {
    switch (display) {
      case "minimized":
        btnMin.classList.add("hidden");
        btnMax.classList.remove("hidden");

        setMinimizedStyle(terminalDisplayId, terminal, output, btnMax);
        break;
      case "collapsed":
        btnMin.classList.remove("hidden");
        btnMax.classList.add("hidden");

        setCollapsedStyle(terminalDisplayId, terminal, output, toggleTerminal);
        break;
      case "normal":
      default:
        btnMin.classList.remove("hidden");
        btnMax.classList.add("hidden");
        setNormalStyle(terminalDisplayId, terminal, output, btnMax);
        break;
    }
  });
</script>

<style>
  /* Estilo cuando se minimiza */
  .terminal-collapsed {
    position: fixed;
    bottom: 10px;
    opacity: 0.7;
    width: 100%; /* w-full */
    max-width: 35rem; /* max-w-2xl â‰ˆ 672px */
    height: 12rem; /* h-100 â‰ˆ 400px (ajustable segÃºn tu diseÃ±o) */
    background-color: #000; /* bg-black */
    border-radius: 0.5rem; /* rounded-lg */
    box-shadow: 0 10px 15px rgba(0, 0, 0, 0.3); /* shadow-lg */
    padding: 1rem; /* p-4 */
    margin-left: auto; /* mx-auto para centrar horizontal */
    margin-right: auto;
    color: #00ff00; /* opcional: texto verde como terminal */
    overflow: hidden; /* opcional: para scroll interno */
    transition: all 0.1s ease; /* para animaciones smooth al minimizar */
    z-index: 10;
  }
  .terminal-normal {
    position: absolute; /* absolute */
    top: 50%; /* top-50 */
    width: 100%; /* w-full */
    opacity: 0.85;
    max-width: 42rem; /* max-w-2xl â‰ˆ 672px */
    height: 26rem; /* h-100 â‰ˆ 400px (ajustable segÃºn tu diseÃ±o) */
    background-color: #000; /* bg-black */
    border-radius: 0.5rem; /* rounded-lg */
    box-shadow: 0 10px 15px rgba(0, 0, 0, 0.3); /* shadow-lg */
    padding: 1rem; /* p-4 */
    margin-left: auto; /* mx-auto para centrar horizontal */
    margin-right: auto;
    transform: translateY(-50%); /* centrar vertical usando top 50% */
    color: #00ff00; /* opcional: texto verde como terminal */
    overflow: hidden; /* opcional: para scroll interno */
    transition: all 0.1s ease; /* para animaciones smooth al minimizar */
    z-index: 10;
  }
  .terminal-minimized {
    position: fixed; /* absolute */
    bottom: -10px; /* top-50 */
    width: 100%; /* w-full */
    opacity: 0.85;
    max-width: 15rem; /* max-w-2xl â‰ˆ 672px */
    height: 3rem; /* h-100 â‰ˆ 400px (ajustable segÃºn tu diseÃ±o) */
    background-color: #000; /* bg-black */
    border-radius: 0.5rem; /* rounded-lg */
    box-shadow: 0 10px 15px rgba(0, 0, 0, 0.3); /* shadow-lg */
    padding: 1rem; /* p-4 */
    margin-left: auto; /* mx-auto para centrar horizontal */
    margin-right: auto;
    transform: translateY(-50%); /* centrar vertical usando top 50% */
    color: #00ff00; /* opcional: texto verde como terminal */
    overflow: hidden; /* opcional: para scroll interno */
    transition: all 0.1s ease; /* para animaciones smooth al minimizar */
    z-index: 10;
  }
</style>
